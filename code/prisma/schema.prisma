//! Configurações do Prisma:
//* Gerador do cliente prisma:
generator client {
  provider = "prisma-client-js"
}

//* Definição do Banco de Dados com o prisma:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! Diagramação das tabelas:
//* Tabela de produtos:
model Product {
  id      Int      @id @default(autoincrement())
  name    String
  flavors Flavor[]
}

//* Tabela de sabores:
model Flavor {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  name      String
  price     Decimal @db.Decimal(12, 2)
  image     String
  orders    Order[]
}

//* Tabela de pedidos:
model Order {
  id        Int     @id @default(autoincrement())
  flavor    Flavor  @relation(fields: [flavorId], references: [id])
  flavorId  Int
  quantity  Int
  price     Decimal @db.Decimal(12, 2)
  accept    Boolean @default(false)
  situation String  @default("Em análise")
  sale      Sale    @relation(fields: [saleId], references: [id])
  saleId    Int
}

//* Tabela de endereços:
model Address {
  id            Int     @id @default(autoincrement())
  cep           String  @db.VarChar(8)
  uf            String  @db.VarChar(2)
  city          String  @db.VarChar(30)
  district      String  @db.VarChar(50)
  streetAddress String  @db.VarChar(50)
  number        String? @db.VarChar(6)
  sale          Sale[]
}

//* Tabela de clientes:
model Client {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  type  String @db.VarChar(50)
  cnpj  String @db.VarChar(14)
  email String @db.VarChar(255)
  phone String @db.VarChar(19)
  sale  Sale[]
}

//* Tabela de vendas:
model Sale {
  id        Int      @id @default(autoincrement())
  price     Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  Int
  address   Address  @relation(fields: [addressId], references: [id])
  addressId Int
  orders    Order[]
}
